#!/usr/bin/python
import subprocess, datetime, os
from getch import getch

def matchIdx(lists):
	taskSize = len(lists[0])
	for l in lists:
		if len(l) < taskSize:
			taskSize = len(l)
	i = 0
	while i < taskSize:
		re = []
		for l in lists:
			re.append(l[i])
		i += 1
		yield re

class gitWikiTodo:
	def __init__(self):
		self.wikiRepo = self.checkWiki()
		self.username = self.getUsername()
		self.fileName = self.getFile()

	def checkWiki(self):
		if not os.path.isdir(".git"):
			print "this doesn't seem to be a git repo"
			return None
		url = subprocess.check_output(["git", "config", "--get", "remote.origin.url"])
		if url.find('.git') == -1:
			repo = url[url.rindex('/')+1:-1]
		else:
			repo = url[url.rindex('/')+1:url.rindex('.git')]
		wikiRepo = repo+'.wiki'
		if not os.path.isdir(wikiRepo):
			print 'wiki repo not found, git cloning ' + wikiRepo
			wikiUrl = url[:url.rindex('/')+1]+wikiRepo+'.git'
			subprocess.call(["git","clone",wikiUrl])
		else:
			print "pulling latest wiki"
			subprocess.call("( cd "+wikiRepo+" && git pull )",shell=True)
		return wikiRepo

	def getUsername(self):
		username = subprocess.check_output(["git", "config", "user.name"])
		name = username.partition(" ")[0]
		return name

	def newFile(self):
		fileName = self.wikiRepo+'/'+self.username+"'s-todos.md"
		subprocess.call(["touch",fileName])
		print 'creating now'
		with open(fileName,'w') as f:
			tableHeader = 'Date | Todo\n:---: | :---'
			f.write(tableHeader)
			f.close()
		return fileName

	def getFile(self):
		fileName = self.wikiRepo+'/'+self.username+"'s-todos.md"

		try:
			with open(fileName,'r') as f:
				f.close()
		except:
			print 'todo list not found'
			return 0
		return fileName

	def writeTodos(self, todos):
		push = '\n'
		d = datetime.date.today()
		push += d.isoformat()+ ' | <ul>'
		for t in todos:
			push += '<li>'+t+'</li>'
		push += '</ul>'
		with open(self.fileName,'a') as f:
			f.write(push)
			f.close()

	def inputTodos(self):
		todos = []
		done = False
		t = raw_input('Enter your todos:\n')
		while t != '':
			todos.append(t)
			t = raw_input('')
		return todos

	def pushWikiChanges(self, msg):
		addName = self.fileName[self.fileName.rindex('/')+1:].replace(" ","\ ")
		addName = addName.replace("'","\\'")
		subprocess.call("( cd "+self.wikiRepo+" && git add "+addName+" )", shell = True)
		subprocess.call("( cd "+self.wikiRepo+" && git commit -m '"+msg+"' )", shell = True)
		subprocess.call("( cd "+self.wikiRepo+" && git push origin master )", shell = True)

	def crossList(self,todos,crossed,msg):
		os.system('cls' if os.name == 'nt' else 'clear')
		for i, t in enumerate(todos):
			print str(i)+".",
			if i in crossed:
				print "*",
			print t
		print msg
		done = getch()
		isint = False
		try:
			done = int(done)
			isint = True
		except:
			pass
		if isint:
			if done < 0 or done >= len(todos):
				crossed = self.crossList(todos,crossed,"enter and number between 0 and "+str(len(todos)-1))
			elif done in crossed:
				crossed.remove(done)
				crossed = self.crossList(todos,crossed,"any more?")
			else:
				crossed.append(done)
				crossed = self.crossList(todos,crossed,"any more?")
		return crossed

	def crossTodos(self,(starts,ends)):
		activeTodos = []
		doneTodos = []
		i = 0
		for s, e in matchIdx([starts,ends]):
			todo = self.rawList[s:e]
			print str(i)+".",todo
			activeTodos.append(todo)
			if i%10==9 or s==starts[-1]:
				doneTodos = doneTodos + [x+10*(i/10) for x in self.crossList(activeTodos,[],"cross off todos and press 'n' when you're done")]
				activeTodos = []
			i += 1
		os.system('cls' if os.name == 'nt' else 'clear')
		doneTodos.sort(reverse = True)
		for t in doneTodos:
			print self.rawList[starts[t]:ends[t]]
			self.rawList = self.rawList[:starts[t]]+"<s>"+self.rawList[starts[t]:ends[t]]+"</s>"+self.rawList[ends[t]:]
		with open(self.fileName,'w') as f:
			print 'writing file'
			f.write(self.rawList)
		return

	def printTodos(self,(starts,ends)):
		i=0
		for s, e in matchIdx([starts,ends]):
			print str(i)+".",self.rawList[s:e]
			i += 1

	def getTodos(self):
		with open(self.fileName,'r') as f:
			self.rawList = f.read()
			f.close()
		starts = []
		ends = []
		idx = 0;
		while idx != -1:
			idx = self.rawList.find("<li>",idx)
			s = idx+4
			idx = self.rawList.find("</li>",idx)
			e = idx
			if self.rawList[s:e].find("<s>") == -1:
				starts.append(s)
				ends.append(e)
		return (starts,ends)

	def read(self):
		if self.fileName == 0:
			return
		markers = self.getTodos()
		self.printTodos(markers)
		return

	def add(self):
		if self.fileName == 0:
			print self.username+"'s-todos.md not found, do you want to create it? y/n"
			makeNew = getch()
			if makeNew == 'y' or makeNew == 'Y':
				self.fileName = self.newFile()
			else:
				return
		print "\033[?1049h\033[H"
		todos = self.inputTodos()
		if todos == []:
			print "\033[?1049l"
			return
		self.writeTodos(todos)
		print "\033[?1049l"
		self.pushWikiChanges("added todos")
		return

	def cross(self):
		if self.fileName == 0:
			return
		markers = self.getTodos()
		print "\033[?1049h\033[H"
		self.crossTodos(markers)
		print "\033[?1049l"
		self.pushWikiChanges("crossed off todos")
		return

wikiTodo = gitWikiTodo()
import argparse
parser = argparse.ArgumentParser()
parser.add_argument('-a','--add', nargs='?', const=True, help='add items to your todo list')
parser.add_argument('-r','--read', nargs='?', const=True, help='read your todo list')
parser.add_argument('-x','--cross', nargs='?', const=True, help='cross off items from your todo list')
args = parser.parse_args()
if args.add:
	wikiTodo.add()
elif args.read:
	wikiTodo.read()
elif args.cross:
	wikiTodo.cross()
else:
	parser.print_help()
